name: Build & Push Image

on:
  push:
    branches: ['**']
    tags: ['v*']
  pull_request:
    branches: ['**']
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ---- TESTY ----
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps and run tests
        run: |
          set -e
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install -U pip setuptools wheel
          # opcjonalne pliki wymagań, jeśli istnieją
          if [ -f agent-local/requirements-test.txt ]; then pip install -r agent-local/requirements-test.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
          if [ -f agent-local/requirements.txt ]; then pip install -r agent-local/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # twardy fallback pakietów potrzebnych do testów
          pip install pytest pytest-asyncio anyio httpx fastapi starlette uvicorn pydantic
          echo "==== pip freeze (head) ===="; pip freeze | sed -n '1,120p'
          PYTHONPATH=agent-local pytest -q

      # ---- BUILD & PUSH ----
      - uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./agent-local
          file: ./agent-local/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
